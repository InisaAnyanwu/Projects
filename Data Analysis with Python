{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n",
    "    </a>\n",
    "</p>\n",
    "\n",
    "<h1 align=center><font size = 5>Data Analysis with Python</font></h1>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# House Sales in King County, USA\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Variable      | Description                                                                                                 |\n",
    "| ------------- | ----------------------------------------------------------------------------------------------------------- |\n",
    "| id            | A notation for a house                                                                                      |\n",
    "| date          | Date house was sold                                                                                         |\n",
    "| price         | Price is prediction target                                                                                  |\n",
    "| bedrooms      | Number of bedrooms                                                                                          |\n",
    "| bathrooms     | Number of bathrooms                                                                                         |\n",
    "| sqft_living   | Square footage of the home                                                                                  |\n",
    "| sqft_lot      | Square footage of the lot                                                                                   |\n",
    "| floors        | Total floors (levels) in house                                                                              |\n",
    "| waterfront    | House which has a view to a waterfront                                                                      |\n",
    "| view          | Has been viewed                                                                                             |\n",
    "| condition     | How good the condition is overall                                                                           |\n",
    "| grade         | overall grade given to the housing unit, based on King County grading system                                |\n",
    "| sqft_above    | Square footage of house apart from basement                                                                 |\n",
    "| sqft_basement | Square footage of the basement                                                                              |\n",
    "| yr_built      | Built Year                                                                                                  |\n",
    "| yr_renovated  | Year when house was renovated                                                                               |\n",
    "| zipcode       | Zip code                                                                                                    |\n",
    "| lat           | Latitude coordinate                                                                                         |\n",
    "| long          | Longitude coordinate                                                                                        |\n",
    "| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n",
    "| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scikit-learn in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (0.20.1)\n",
      "Collecting scikit-learn\n",
      "  Downloading scikit_learn-1.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (24.8 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.8/24.8 MB\u001b[0m \u001b[31m29.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hCollecting joblib>=0.11\n",
      "  Downloading joblib-1.2.0-py3-none-any.whl (297 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m298.0/298.0 kB\u001b[0m \u001b[31m24.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: scipy>=1.1.0 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from scikit-learn) (1.7.3)\n",
      "Requirement already satisfied: numpy>=1.14.6 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from scikit-learn) (1.21.6)\n",
      "Collecting threadpoolctl>=2.0.0\n",
      "  Downloading threadpoolctl-3.1.0-py3-none-any.whl (14 kB)\n",
      "Installing collected packages: threadpoolctl, joblib, scikit-learn\n",
      "Successfully installed joblib-1.2.0 scikit-learn-1.0.2 threadpoolctl-3.1.0\n"
     ]
    }
   ],
   "source": [
    "#After executing the below command restart the kernel and run all cells.\n",
    "!pip3 install scikit-learn --upgrade --user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will require the following libraries:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler,PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 1: Importing Data Sets\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the csv:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "file_name='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'\n",
    "df=pd.read_csv(file_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the method <code>head</code> to display the first 5 columns of the dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>7129300520</td>\n",
       "      <td>20141013T000000</td>\n",
       "      <td>221900.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1180</td>\n",
       "      <td>5650</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1180</td>\n",
       "      <td>0</td>\n",
       "      <td>1955</td>\n",
       "      <td>0</td>\n",
       "      <td>98178</td>\n",
       "      <td>47.5112</td>\n",
       "      <td>-122.257</td>\n",
       "      <td>1340</td>\n",
       "      <td>5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6414100192</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>538000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2570</td>\n",
       "      <td>7242</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2170</td>\n",
       "      <td>400</td>\n",
       "      <td>1951</td>\n",
       "      <td>1991</td>\n",
       "      <td>98125</td>\n",
       "      <td>47.7210</td>\n",
       "      <td>-122.319</td>\n",
       "      <td>1690</td>\n",
       "      <td>7639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>5631500400</td>\n",
       "      <td>20150225T000000</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>770</td>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>770</td>\n",
       "      <td>0</td>\n",
       "      <td>1933</td>\n",
       "      <td>0</td>\n",
       "      <td>98028</td>\n",
       "      <td>47.7379</td>\n",
       "      <td>-122.233</td>\n",
       "      <td>2720</td>\n",
       "      <td>8062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2487200875</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>604000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1960</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1050</td>\n",
       "      <td>910</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>98136</td>\n",
       "      <td>47.5208</td>\n",
       "      <td>-122.393</td>\n",
       "      <td>1360</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1954400510</td>\n",
       "      <td>20150218T000000</td>\n",
       "      <td>510000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1680</td>\n",
       "      <td>8080</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1680</td>\n",
       "      <td>0</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6168</td>\n",
       "      <td>-122.045</td>\n",
       "      <td>1800</td>\n",
       "      <td>7503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n",
       "0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n",
       "1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n",
       "2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n",
       "3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n",
       "4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n",
       "\n",
       "   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n",
       "0         1180      5650     1.0           0  ...      7        1180   \n",
       "1         2570      7242     2.0           0  ...      7        2170   \n",
       "2          770     10000     1.0           0  ...      6         770   \n",
       "3         1960      5000     1.0           0  ...      7        1050   \n",
       "4         1680      8080     1.0           0  ...      8        1680   \n",
       "\n",
       "   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n",
       "0              0      1955             0    98178  47.5112 -122.257   \n",
       "1            400      1951          1991    98125  47.7210 -122.319   \n",
       "2              0      1933             0    98028  47.7379 -122.233   \n",
       "3            910      1965             0    98136  47.5208 -122.393   \n",
       "4              0      1987             0    98074  47.6168 -122.045   \n",
       "\n",
       "   sqft_living15  sqft_lot15  \n",
       "0           1340        5650  \n",
       "1           1690        7639  \n",
       "2           2720        8062  \n",
       "3           1360        5000  \n",
       "4           1800        7503  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1\n",
    "\n",
    "Display the data types of each column using the function dtypes, then take a screenshot and submit it, include your code in the image.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0         int64\n",
      "id                 int64\n",
      "date              object\n",
      "price            float64\n",
      "bedrooms         float64\n",
      "bathrooms        float64\n",
      "sqft_living        int64\n",
      "sqft_lot           int64\n",
      "floors           float64\n",
      "waterfront         int64\n",
      "view               int64\n",
      "condition          int64\n",
      "grade              int64\n",
      "sqft_above         int64\n",
      "sqft_basement      int64\n",
      "yr_built           int64\n",
      "yr_renovated       int64\n",
      "zipcode            int64\n",
      "lat              float64\n",
      "long             float64\n",
      "sqft_living15      int64\n",
      "sqft_lot15         int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Return the dtype of each column from House_Sales table\n",
    "House_Sales = df.dtypes\n",
    "print(House_Sales)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the method describe to obtain a statistical summary of the dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21600.000000</td>\n",
       "      <td>21603.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.400881e+05</td>\n",
       "      <td>3.372870</td>\n",
       "      <td>2.115736</td>\n",
       "      <td>2079.899736</td>\n",
       "      <td>1.510697e+04</td>\n",
       "      <td>1.494309</td>\n",
       "      <td>0.007542</td>\n",
       "      <td>0.234303</td>\n",
       "      <td>3.409430</td>\n",
       "      <td>7.656873</td>\n",
       "      <td>1788.390691</td>\n",
       "      <td>291.509045</td>\n",
       "      <td>1971.005136</td>\n",
       "      <td>84.402258</td>\n",
       "      <td>98077.939805</td>\n",
       "      <td>47.560053</td>\n",
       "      <td>-122.213896</td>\n",
       "      <td>1986.552492</td>\n",
       "      <td>12768.455652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.671272e+05</td>\n",
       "      <td>0.926657</td>\n",
       "      <td>0.768996</td>\n",
       "      <td>918.440897</td>\n",
       "      <td>4.142051e+04</td>\n",
       "      <td>0.539989</td>\n",
       "      <td>0.086517</td>\n",
       "      <td>0.766318</td>\n",
       "      <td>0.650743</td>\n",
       "      <td>1.175459</td>\n",
       "      <td>828.090978</td>\n",
       "      <td>442.575043</td>\n",
       "      <td>29.373411</td>\n",
       "      <td>401.679240</td>\n",
       "      <td>53.505026</td>\n",
       "      <td>0.138564</td>\n",
       "      <td>0.140828</td>\n",
       "      <td>685.391304</td>\n",
       "      <td>27304.179631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.500000e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>5.200000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>47.155900</td>\n",
       "      <td>-122.519000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>651.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.219500e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>1427.000000</td>\n",
       "      <td>5.040000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1190.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1951.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98033.000000</td>\n",
       "      <td>47.471000</td>\n",
       "      <td>-122.328000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>5100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.500000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>1910.000000</td>\n",
       "      <td>7.618000e+03</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1560.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1975.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98065.000000</td>\n",
       "      <td>47.571800</td>\n",
       "      <td>-122.230000</td>\n",
       "      <td>1840.000000</td>\n",
       "      <td>7620.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.450000e+05</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2550.000000</td>\n",
       "      <td>1.068800e+04</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2210.000000</td>\n",
       "      <td>560.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98118.000000</td>\n",
       "      <td>47.678000</td>\n",
       "      <td>-122.125000</td>\n",
       "      <td>2360.000000</td>\n",
       "      <td>10083.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>13540.000000</td>\n",
       "      <td>1.651359e+06</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9410.000000</td>\n",
       "      <td>4820.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>98199.000000</td>\n",
       "      <td>47.777600</td>\n",
       "      <td>-121.315000</td>\n",
       "      <td>6210.000000</td>\n",
       "      <td>871200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\n",
       "count  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \n",
       "mean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \n",
       "std    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \n",
       "min    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n",
       "25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n",
       "50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n",
       "75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \n",
       "max    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n",
       "\n",
       "             floors    waterfront          view     condition         grade  \\\n",
       "count  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean       1.494309      0.007542      0.234303      3.409430      7.656873   \n",
       "std        0.539989      0.086517      0.766318      0.650743      1.175459   \n",
       "min        1.000000      0.000000      0.000000      1.000000      1.000000   \n",
       "25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n",
       "50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n",
       "75%        2.000000      0.000000      0.000000      4.000000      8.000000   \n",
       "max        3.500000      1.000000      4.000000      5.000000     13.000000   \n",
       "\n",
       "         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\n",
       "count  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \n",
       "std      828.090978     442.575043     29.373411    401.679240     53.505026   \n",
       "min      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n",
       "25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n",
       "50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n",
       "75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \n",
       "max     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n",
       "\n",
       "                lat          long  sqft_living15     sqft_lot15  \n",
       "count  21613.000000  21613.000000   21613.000000   21613.000000  \n",
       "mean      47.560053   -122.213896    1986.552492   12768.455652  \n",
       "std        0.138564      0.140828     685.391304   27304.179631  \n",
       "min       47.155900   -122.519000     399.000000     651.000000  \n",
       "25%       47.471000   -122.328000    1490.000000    5100.000000  \n",
       "50%       47.571800   -122.230000    1840.000000    7620.000000  \n",
       "75%       47.678000   -122.125000    2360.000000   10083.000000  \n",
       "max       47.777600   -121.315000    6210.000000  871200.000000  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Return a statistical summary\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 2: Data Wrangling\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2\n",
    "\n",
    "Drop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "# drop multiple columns by name\n",
    "df.drop(['id', 'Unnamed: 0'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21600.000000</td>\n",
       "      <td>21603.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.400881e+05</td>\n",
       "      <td>3.372870</td>\n",
       "      <td>2.115736</td>\n",
       "      <td>2079.899736</td>\n",
       "      <td>1.510697e+04</td>\n",
       "      <td>1.494309</td>\n",
       "      <td>0.007542</td>\n",
       "      <td>0.234303</td>\n",
       "      <td>3.409430</td>\n",
       "      <td>7.656873</td>\n",
       "      <td>1788.390691</td>\n",
       "      <td>291.509045</td>\n",
       "      <td>1971.005136</td>\n",
       "      <td>84.402258</td>\n",
       "      <td>98077.939805</td>\n",
       "      <td>47.560053</td>\n",
       "      <td>-122.213896</td>\n",
       "      <td>1986.552492</td>\n",
       "      <td>12768.455652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.671272e+05</td>\n",
       "      <td>0.926657</td>\n",
       "      <td>0.768996</td>\n",
       "      <td>918.440897</td>\n",
       "      <td>4.142051e+04</td>\n",
       "      <td>0.539989</td>\n",
       "      <td>0.086517</td>\n",
       "      <td>0.766318</td>\n",
       "      <td>0.650743</td>\n",
       "      <td>1.175459</td>\n",
       "      <td>828.090978</td>\n",
       "      <td>442.575043</td>\n",
       "      <td>29.373411</td>\n",
       "      <td>401.679240</td>\n",
       "      <td>53.505026</td>\n",
       "      <td>0.138564</td>\n",
       "      <td>0.140828</td>\n",
       "      <td>685.391304</td>\n",
       "      <td>27304.179631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.500000e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>5.200000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>47.155900</td>\n",
       "      <td>-122.519000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>651.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.219500e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>1427.000000</td>\n",
       "      <td>5.040000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1190.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1951.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98033.000000</td>\n",
       "      <td>47.471000</td>\n",
       "      <td>-122.328000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>5100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.500000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>1910.000000</td>\n",
       "      <td>7.618000e+03</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1560.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1975.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98065.000000</td>\n",
       "      <td>47.571800</td>\n",
       "      <td>-122.230000</td>\n",
       "      <td>1840.000000</td>\n",
       "      <td>7620.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.450000e+05</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2550.000000</td>\n",
       "      <td>1.068800e+04</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2210.000000</td>\n",
       "      <td>560.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98118.000000</td>\n",
       "      <td>47.678000</td>\n",
       "      <td>-122.125000</td>\n",
       "      <td>2360.000000</td>\n",
       "      <td>10083.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>13540.000000</td>\n",
       "      <td>1.651359e+06</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9410.000000</td>\n",
       "      <td>4820.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>98199.000000</td>\n",
       "      <td>47.777600</td>\n",
       "      <td>-121.315000</td>\n",
       "      <td>6210.000000</td>\n",
       "      <td>871200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\n",
       "count  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \n",
       "mean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \n",
       "std    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \n",
       "min    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n",
       "25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n",
       "50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n",
       "75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \n",
       "max    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n",
       "\n",
       "             floors    waterfront          view     condition         grade  \\\n",
       "count  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean       1.494309      0.007542      0.234303      3.409430      7.656873   \n",
       "std        0.539989      0.086517      0.766318      0.650743      1.175459   \n",
       "min        1.000000      0.000000      0.000000      1.000000      1.000000   \n",
       "25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n",
       "50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n",
       "75%        2.000000      0.000000      0.000000      4.000000      8.000000   \n",
       "max        3.500000      1.000000      4.000000      5.000000     13.000000   \n",
       "\n",
       "         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\n",
       "count  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \n",
       "std      828.090978     442.575043     29.373411    401.679240     53.505026   \n",
       "min      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n",
       "25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n",
       "50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n",
       "75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \n",
       "max     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n",
       "\n",
       "                lat          long  sqft_living15     sqft_lot15  \n",
       "count  21613.000000  21613.000000   21613.000000   21613.000000  \n",
       "mean      47.560053   -122.213896    1986.552492   12768.455652  \n",
       "std        0.138564      0.140828     685.391304   27304.179631  \n",
       "min       47.155900   -122.519000     399.000000     651.000000  \n",
       "25%       47.471000   -122.328000    1490.000000    5100.000000  \n",
       "50%       47.571800   -122.230000    1840.000000    7620.000000  \n",
       "75%       47.678000   -122.125000    2360.000000   10083.000000  \n",
       "max       47.777600   -121.315000    6210.000000  871200.000000  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Return a statistical summary to see if the \"id\" and \"Unnamed: 0\" columns been removed\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of NaN values for the column bedrooms : 13\n",
      "number of NaN values for the column bathrooms : 10\n"
     ]
    }
   ],
   "source": [
    "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\n",
    "print(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean=df['bedrooms'].mean()\n",
    "df['bedrooms'].replace(np.nan,mean, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean=df['bathrooms'].mean()\n",
    "df['bathrooms'].replace(np.nan,mean, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of NaN values for the column bedrooms : 0\n",
      "number of NaN values for the column bathrooms : 0\n"
     ]
    }
   ],
   "source": [
    "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\n",
    "print(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 3: Exploratory Data Analysis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3\n",
    "\n",
    "Use the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>floors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>10680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>8241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.5</th>\n",
       "      <td>1910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.5</th>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.5</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     floors\n",
       "1.0   10680\n",
       "2.0    8241\n",
       "1.5    1910\n",
       "3.0     613\n",
       "2.5     161\n",
       "3.5       8"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"floors\"].value_counts().to_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4\n",
    "\n",
    "Use the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='waterfront', ylabel='price'>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAioAAAHACAYAAACMB0PKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAunklEQVR4nO3dfXRU5YHH8d/NRGaQJIMQQEISwBcQBFReRN4EdisWPC6w1hcSEHTXU1tAXlZ3pUpXrTS1agTrilU5IkKQWoW1ulhwFVAjGEBEWwqIYpISZJNKhqAzyOTuHy6zjIQQkjDPMzPfzzn3nMx97kx+MU7mx315ruO6risAAAALpZgOAAAAcDIUFQAAYC2KCgAAsBZFBQAAWIuiAgAArEVRAQAA1qKoAAAAa1FUAACAtSgqAADAWhQVAABgrYQpKhs2bNC1116rrKwsOY6jVatWnfZruK6rRx55RN26dZPX61VOTo5++ctfNn9YAADQIKmmAzSXw4cP65JLLtEtt9yi6667rlGvMWPGDK1Zs0aPPPKIevfurerqalVWVjZzUgAA0FBOIt6U0HEcrVy5UuPGjYusO3LkiO69914tW7ZMBw8eVK9evfTQQw9pxIgRkqQdO3aoT58++uSTT9S9e3czwQEAQJSEOfRzKrfccovee+89vfjii9q+fbuuv/56/fCHP9Tu3bslSX/4wx903nnn6bXXXlPXrl3VpUsX/fM//7P+9re/GU4OAEDySoqismfPHi1fvlwvvfSShg0bpvPPP1933nmnhg4dqueee06S9Nlnn+mLL77QSy+9pCVLlmjx4sXasmWLfvSjHxlODwBA8kqYc1Tqs3XrVrmuq27dukWtD4VCatu2rSSptrZWoVBIS5YsiWy3aNEi9evXTzt37uRwEAAABiRFUamtrZXH49GWLVvk8XiixtLS0iRJHTt2VGpqalSZ6dGjhySptLSUogIAgAFJUVQuu+wyhcNhHThwQMOGDatzmyFDhujo0aPas2ePzj//fEnSrl27JEmdO3eOWVYAAPD/Euaqn5qaGn366aeSvismhYWFGjlypNq0aaPc3FxNnDhR7733nh599FFddtllqqys1FtvvaXevXtrzJgxqq2t1YABA5SWlqb58+ertrZWU6dOVUZGhtasWWP4pwMAIDklTFFZt26dRo4cecL6yZMna/Hixfr222/1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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=\"waterfront\", y=\"price\", data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5\n",
    "\n",
    "Use the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='sqft_above', ylabel='price'>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x=\"sqft_above\", y=\"price\", data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "zipcode         -0.053203\n",
       "long             0.021626\n",
       "condition        0.036362\n",
       "yr_built         0.054012\n",
       "sqft_lot15       0.082447\n",
       "sqft_lot         0.089661\n",
       "yr_renovated     0.126434\n",
       "floors           0.256794\n",
       "waterfront       0.266369\n",
       "lat              0.307003\n",
       "bedrooms         0.308797\n",
       "sqft_basement    0.323816\n",
       "view             0.397293\n",
       "bathrooms        0.525738\n",
       "sqft_living15    0.585379\n",
       "sqft_above       0.605567\n",
       "grade            0.667434\n",
       "sqft_living      0.702035\n",
       "price            1.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['price'].sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 4: Model Development\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00046769430149007363"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[['long']]\n",
    "Y = df['price']\n",
    "lm = LinearRegression()\n",
    "lm.fit(X,Y)\n",
    "lm.score(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question  6\n",
    "\n",
    "Fit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.49285321790379316"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[['sqft_living']]\n",
    "Y = df['price']\n",
    "lm.fit(X,Y)\n",
    "lm.score(X,Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 7\n",
    "\n",
    "Fit a linear regression model to predict the <code>'price'</code> using the list of features:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]     \n",
    "X = df[features]\n",
    "Y = df['price']\n",
    "lm.fit(X,Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then calculate the R^2. Take a screenshot of your code.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6576951666037502"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.score(X,Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This will help with Question 8\n",
    "\n",
    "Create a list of tuples, the first element in the tuple contains the name of the estimator:\n",
    "\n",
    "<code>'scale'</code>\n",
    "\n",
    "<code>'polynomial'</code>\n",
    "\n",
    "<code>'model'</code>\n",
    "\n",
    "The second element in the tuple  contains the model constructor\n",
    "\n",
    "<code>StandardScaler()</code>\n",
    "\n",
    "<code>PolynomialFeatures(include_bias=False)</code>\n",
    "\n",
    "<code>LinearRegression()</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 8\n",
    "\n",
    "Use the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('scale', StandardScaler(copy=True, with_mean=True, with_std=True)), ('polynomial', PolynomialFeatures(degree=2, include_bias=False, interaction_only=False)), ('model', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False))])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe=Pipeline(Input)\n",
    "pipe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 5: Model Evaluation and Refinement\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import the necessary modules:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will split the data into training and testing sets:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of test samples: 3242\n",
      "number of training samples: 18371\n"
     ]
    }
   ],
   "source": [
    "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \n",
    "X = df[features]\n",
    "Y = df['price']\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n",
    "\n",
    "\n",
    "print(\"number of test samples:\", x_test.shape[0])\n",
    "print(\"number of training samples:\",x_train.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 9\n",
    "\n",
    "Create and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6478759163939112"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RigeModel=Ridge(alpha=0.1)\n",
    "RigeModel.fit(x_train, y_train)\n",
    "RigeModel.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 10\n",
    "\n",
    "Perform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7002744259992868"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pr = PolynomialFeatures(degree=2)\n",
    "x_train_pr = pr.fit_transform(x_train)\n",
    "x_test_pr = pr.fit_transform(x_test)\n",
    "\n",
    "RigeModel=Ridge(alpha=0.1)\n",
    "RigeModel.fit(x_train_pr, y_train)\n",
    "RigeModel.score(x_test_pr, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>About the Authors:</h2> \n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Michelle Carey</a>, <a href=\"https://www.linkedin.com/in/jiahui-mavis-zhou-a4537814a?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Mavis Zhou</a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change Log\n",
    "\n",
    "| Date (YYYY-MM-DD) | Version | Changed By      | Change Description                           |\n",
    "| ----------------- | ------- | --------------- | -------------------------------------------- |\n",
    "| 2022-07-29        | 2.3     | Lakshmi Holla   | Added library import                         |\n",
    "| 2020-12-01        | 2.2     | Aije Egwaikhide | Coverted Data describtion from text to table |\n",
    "| 2020-10-06        | 2.1     | Lakshmi Holla   | Changed markdown instruction of Question1    |\n",
    "| 2020-08-27        | 2.0     | Malika Singla   | Added lab to GitLab                          |\n",
    "\n",
    "<hr>\n",
    "\n",
    "## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
    "\n",
    "<p>\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
